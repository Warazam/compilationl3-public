Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
alphanum = [lettre + ['_' + '$']];
nb = ['0' .. '9'];

Tokens

nb = ['0' .. '9'];
id = [lettre + nb];
po = '(';
pf = ')';
vir = ',';
si = 'si';
eg = '=';
min = '-';
add = '+' ;
non = '!' ;
inf = '<' ;
supp = '>' ;
mul = '*' ;
div = '/' ;
ptvir = ';' ;
pip = '|' ;
alors = 'alors';
sinon = 'sinon';
tantque = 'tantque';
faire = 'faire';
entier = 'entier';
retour = 'retour';
lire = 'lire';
ecrire = 'ecrire';
nombre = nb+;
crochet_ouvrant = '[';
crochet_fermant = ']';
accolade_ouvrante = '{';
accolade_fermante = '}';
espaces = (' ' | 13 | 10)+;
commentaire = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
et = '&';

Ignored Tokens

espaces, commentaire;

Productions

p =
ldvo ldf
;

var =
{entier} id |
{tableau} id crochet_ouvrant e crochet_fermant
;

ldvo =
{a} ldv ptvir |
{b}
;

ldv =
{c} dv ldvb |
{d}
;

ldvb =
{e} vir dv ldvb |
{f}
;


ldf =
{g} df ldf |
{h}
;

df =
id po ldv pf ldvo ibloc
;

e =
{i} e pip e1 |
{j} e1
;

e1 =
{k} e1 et e2 |
{l} e2
;

e2 =
{m}e2 eg e3 |
{n}e2 inf e3 |
{o}e3
;

e3 =
{p} e3 add e4|
{q} e3 min e4|
{r} e4
;

e4 =
{s}e4 mul e5|
{t}e4 div e5|
{u}e5
;

e5 =
{v}non e5|
{w}e6
;

e6 =
{x}po e pf|
{y}nb|
{z}app|
{aa}var|
{ab}lire po pf
;

i =
{ac}iaff |
{ad}isi |
{ae}itq|
{af}iapp|
{ag}ibloc|
{ah}iret
;

iaff =
var eg e ptvir
;

ibloc =
accolade_ouvrante li accolade_fermante
;

isi =
{ai} si e alors ibloc |
{aj} si e alors [i1]:ibloc sinon [i2]:ibloc
;

iapp =
app ptvir
;

iecr =
ecrire po e pf
;

app =
id po e pf
;

dv =
{aq}id |
{ak}id crochet_ouvrant nb crochet_fermant
;

itq =
tantque e faire ibloc
;

li =
{al}lib |
{am}
;

lib =
{an} ptvir lib |
{ao}
;

iret =
 retour e ptvir
;


ilire =
lire po pf ptvir
;



